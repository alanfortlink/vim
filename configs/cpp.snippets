snippet if "" i
if(${1:condition}){
	${2}
}
endsnippet

snippet st "" i 
struct ${1:name}{
};
endsnippet

snippet comp "" i 
struct ${1:name}{
	bool operator()(const ${2:Type}& ${3:item}) const {
		return ${4:false};
	}
};
endsnippet

snippet compv "" i 
struct ${1:name}{
	const ${2:bsl}::vector<${3:Type}>& d_${4:propertyName};

	$1(const bsl::vector<$3>& $4) : d_$4($4) {}

	bool operator()(const $3& ${5:item}) const {
		return ${6:false};
	}
};
endsnippet

snippet inc	"" i
#include <${1:}>
endsnippet

snippet hdc "" i
#include <${1:`!p snip.rv = snip.basename`.h}>

namespace BloombergLP {
namespace ${2:} {

${3}

} // $2
} // BloombergLP


endsnippet

snippet hd "" i
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}
#define $1

namespace BloombergLP {
namespace ${2:} {

/**
* @brief ${3:}
*/
class ${4:`!p snip.rv = snip.basename[snip.basename.find("_")+1:]`}{
protected:
	${5:}

public:
	$4();
	~$4();
	${6:}
};

} // $2
} // BloombergLP

#endif
endsnippet

snippet cl "" i 
class ${1:name}{
	public:
};
endsnippet

snippet ns "" i
namespace ${1:name} {
	${2}
} // $1
endsnippet

snippet nse "" i
namespace {

${1}

}
endsnippet

snippet ::ci "" i
::const_iterator${1:}
endsnippet

snippet ::i "" i
::iterator${1:}
endsnippet

snippet str "" i
bsl::string
endsnippet

snippet uset "" i
bsl::unordered_set<${1}>
endsnippet

snippet umap "" i
bsl::unordered_map<${1}>
endsnippet

snippet vec "" i
bsl::vector<${1}>
endsnippet

snippet for "" i
for(${1:}){
	${2:}
}
endsnippet

snippet fori "" i
for(int ${1:i} = 0; $1 < ${2:container.}${3:size()}; $1++){
	${4:}
}
endsnippet

snippet forvec "" i
for(bsl::vector<${1:type}>::iterator ${2:it} = ${3:container.}begin(); 
	$2 != $3end(); 
	++$2){
	${4};
}
endsnippet

snippet forcvec "" i
for(bsl::vector<${1:type}>::const_iterator ${2:it} = ${3:container.}begin(); 
	$2 != $3end(); 
	++$2){
	${4};
}
endsnippet

snippet nsp "" i
bsl::shared_ptr<${1:type}> ${2}
endsnippet

snippet nscp "" i
bsl::shared_ptr<const ${1:type}> ${2}
endsnippet

snippet csp "" i
const bsl::shared_ptr<${1:type}> ${2}
endsnippet

snippet msp "" i
bsl::make_shared<${1:type}>(${2})${3}
endsnippet
