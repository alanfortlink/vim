snippet if "" i
if(${1:condition}){
	${2}
}
endsnippet

snippet struct "" i 
struct ${1:name}{
};
endsnippet

snippet comp "" i 
struct ${1:name}{
	bool operator()(const ${2:Type}& ${3:item}) const {
		return ${4:false};
	}
};
endsnippet

snippet compv "" i 
struct ${1:name}{
	const ${2:bsl}::vector<${3:Type}>& d_${4:propertyName};

	$1(const bsl::vector<$3>& $4) : d_$4($4) {}

	bool operator()(const $3& ${5:item}) const {
		return ${6:false};
	}
};
endsnippet

snippet hd "" i
#ifndef ${1:}
#define $1

${2:}

#endif
endsnippet

snippet class "" i 
class ${1:name}{
	public:
};
endsnippet

snippet ns "" i
namespace ${1:name} {
	${2}
} // $1
endsnippet

snippet forvec "" i
for(bsl::vector<${1:type}>::iterator ${2:it} = ${3:container}.begin(); 
	$2 != $3.end(); 
	++$2){
	${4};
}
endsnippet

snippet forcvec "" i
for(bsl::vector<${1:type}>::const_iterator ${2:it} = ${3:container}.begin(); 
	$2 != $3.end(); 
	++$2){
	${4};
}
endsnippet
